'''


app = Flask(__name__)   - Создание обьекта сервера Flask

db = SQLAlchemy(app)    - Создание обьекта для работы с БД, передаем в нее
                          аргумент, в котором хранится обьект сервера Flask

db.create_all()         - Создать все таблицы в Бд из созданных моделей,
                          модели должны быть импортированы.

db.session.add(company) - После создания обьекта модели, для ее созранения тоесть
                          для создания запроса INSERT передаем обьект этой модели
                          в сессию. Можно передавать 1 обьект в сессию.

db.session.add_all(     - Можно передавать несколько обьектов в сессию, джля этогго
        [cd1, cd2, cd3]   обьекты должны быть упакованы в список.
    )

db.session.commit()     - После добавления обьектов чтобы изменения вступили в силу,
                          запускаем коммит.


db.session.query(Company).all()    - SQL запрос в БД на выборку всего что есть в
                                     таблице Company.

db.session.query(Company).first()  - Запрос на выборку первого эллемента из
                                     таблицы Company.


db.session.query(User).filter(     - Запрос в таблицу User найти одну первую запись
User.telegramID == message.chat.id   у которой поле telegraID равна заданному числу.
).first()                            выбрать только первую запись и вернуть ее.




                        ОПИСАНИЕ МОДЕЛЕЙ И СВЯЗЕЙ МЕЖДУ НИМИ

__tablename__ Содержит в себе название создаваемой таблицы

                Описание типолв применяемых для создания столбцов в SQL через модели в SQLAlchemy

SQLAlchemy	 | Python	        |    SQL
-------------------------------------------------
BigInteger	 |  int	            |  BIGINT
Boolean	     |  bool	        |  BOOLEAN или SMALLINT
Date	     |  datetime.date   |  DATE
DateTime	 |  datetime.date   |  DATETIME
Integer	     |  int	            |  INTEGER
Float	     |  float	        |  FLOAT или REAL
Numeric	     |  decimal.Decimal |  NUMERIC
Text	     |  str	            |  TEXT
String(255)  |  str             |  STRING
-------------------------------------------------


                            Создание связей:

                           Один ко многим 1::M

У Компании есть опции,х может быть множество у одной компании, так что тут
Связь 1 ко Многим, тоесть у одной компании множество опций.

1) У класса Company добавляем поле с типом db.relationship которому передаем
    2 аргумента:
        1 - название зависимой Таблицы
        2 - backref обратная ссылка, благодаря этому полю мы можем вызывать
            родительскую сущьность из Базы Данных. Тоесть не только из
            Компании получить все ее описания, но и из описания компании
            получить компанию к которой это описание принадлежит.

    class Company():
        #....
        CompanyDescription = db.relationship(
                                    'CompanyDescription',
                                    backref='Company'
                                )


2) Множество описаний в CompanyDescription которые принадлежат различным компаниям.
    Добавляем в эту таблицу внешний ключ по которому и будет происходить связь
    описания, с компанией которой он принадлежит. Название внешнего ключа даем
    по названию таблицы, ключа по которому они связаны.
    2 аргумента:
        1 - Тип поля по которому связаны таблицы, тип должен соответствовать, тому
            типу, который есть у родительской таблицы.
        2 - db.ForeignKey() специальный тип указывающий внешнию связь, и передаем
        ему строчный аргумент, в формате Название таблицы и название ключа по
        которому и будет связь таблиц.

    class CompanyDescription():
        #...
        Company_id = db.Column(
                        db.Integer(),
                        db.ForeignKey('Company.id')
                    )



'''

